name: Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'img/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'img/**'
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Gradle variant to build'
        type: choice
        required: true
        default: Debug
        options: [ Debug, Release ]
      targetBranch:
        description: 'Git ref to check out (leave blank for the ref that triggered the run)'
        type: string
        required: false

jobs:
  build:
    name: "Build ${{ github.event.inputs.buildVariant || 'Debug' }}"
    runs-on: ubuntu-latest

    # ── job‑level environment so later steps can reference VARIANT / VARIANT_LOWER
    env:
      VARIANT: ${{ github.event.inputs.buildVariant != '' && github.event.inputs.buildVariant || 'Debug' }}
      VARIANT_LOWER: ${{ github.event.inputs.buildVariant != '' && lower(github.event.inputs.buildVariant) || 'debug' }}

    steps:
      # 1️⃣ Clone
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          ref: ${{ github.event.inputs.targetBranch || github.ref }}

      # 2️⃣ Validate wrapper
      - name: Validation
        uses: gradle/actions/wrapper-validation@v4

      # 3️⃣ Java
      - name: Java setup
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4️⃣ Cache
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5️⃣ Build variant
      - name: Build ${{ env.VARIANT }} APKs
        run: ./gradlew assemble${{ env.VARIANT }}

      # 6️⃣ Build companion Termux package
      - name: Build companion package
        run: ./build_termux_package

      # 7️⃣ Upload artefacts (one example shown; replicate for others)
      - name: Upload universal APK
        uses: actions/upload-artifact@v4
        with:
          name: termux-x11-universal-${{ env.VARIANT_LOWER }}
          path: app/build/outputs/apk/${{ env.VARIANT_LOWER }}/app-universal-${{ env.VARIANT_LOWER }}.apk

      # ▶︎ repeat the upload‑artifact block for the other ABIs, .deb, .pkg, etc.

      # 8️⃣ Nightly release (unchanged)
      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        if: github.repository == 'termux/termux-x11' && github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Nightly Release $$'
          draft: false
          prerelease: false
          body: |
            This is a nightly release of the termux-x11 app.
            Based on ${{ github.sha }}
          files: |
            app/build/outputs/apk/${{ env.VARIANT_LOWER }}/app-*-${{ env.VARIANT_LOWER }}.apk
            app/build/outputs/apk/${{ env.VARIANT_LOWER }}/termux-x11-*-all.deb
            app/build/outputs/apk/${{ env.VARIANT_LOWER }}/termux-x11-*-any.pkg.tar.xz
